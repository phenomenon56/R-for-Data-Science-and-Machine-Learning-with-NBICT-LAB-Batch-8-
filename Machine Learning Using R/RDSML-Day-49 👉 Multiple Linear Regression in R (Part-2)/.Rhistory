install.packages("nycflights13")
attach(nycflights13::flights)
head(nycflights13::flights)
library(psych)
?describe
install.packages("mgcv", lib = "C:/Users/Irfan/Documents/R/win-library/4.5")
install.packages("mgcv", lib = "C:/Users/Irfan/Documents/R/win-library/4.5")
dir.create("C:/Users/Irfan/Desktop/Rlibs", showWarnings = FALSE)
.libPaths("C:/Users/Irfan/Desktop/Rlibs")
install.packages("mgcv")
library(mgcv)
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("ggtree")
install.packages("lattice")
library(ape)
tree = read.tree("C:/Users/Irfan/Downloads/example_tree.nwk")
tree
library(BiocManager)
tree = read.tree("C:\Users\Irfan\Downloads")
tree = read.tree("C:\\Users\\Irfan\\Downloads\\labeled_example_tree.nwk")
tree
meta = read.csv("C:\\Users\\Irfan\\Downloads\\phylogeny_data.csv", header = TRUE)
head(meta)
plot(tree)
tree = midpoint(tree)
install.packages("phangorn")
library(phangorn)
tree = midpoint(tree)
plot(tree)
library(ggtree)
dir.create("C:/Users/Irfan/Desktop/Rlibs", showWarnings = FALSE)
.libPaths("C:/Users/Irfan/Desktop/Rlibs")
install.packages("mgcv")
tree = midpoint(tree)
dir.create("C:/Users/Irfan/Desktop/Rlibs", showWarnings = FALSE)
.libPaths("C:/Users/Irfan/Desktop/Rlibs")
#install.packages("mgcv")
library(mgcv)
#install.packages("BiocManager")
library(BiocManager)
BiocManager::install("ggtree")
tree = read.tree("C:\\Users\\Irfan\\Downloads\\labeled_example_tree.nwk")
tree
meta = read.csv("C:\\Users\\Irfan\\Downloads\\phylogeny_data.csv", header = TRUE)
head(meta)
plot(tree)
install.packages("phangorn")
install.packages("phangorn")
library(phangorn)
tree = midpoint(tree)
plot(tree)
t1 = ggtree(tree) %<+% meta
t1
library(ggplot2)
library(ggtree)
ggtree(tree) %<+% meta +
geom_tippoint()
BiocManager::install("treeio")
library(treeio)
library(treeio)
install.packages("viridis")
install.packages("ggnewscale")
ggtree(tree) %<+% meta +
geom_tippoint(aes(color = Host))
ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))
tree = midpoint(tree)
ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))
t1= ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))
#install.packages("viridis")
#install.packages("ggnewscale")
head(meta)
meta.water = meta[1, 'Host']
meta.water
meta.water = as.data.frame (meta[1, 'Host'])
meta.water
row.names(meta.water)
colnames(meta.water)
head(meta)
meta$Strain_Name
rownames(meta.water)= meta$Strain_Name
colnames(meta.water) = 'Water'
gheatmap(t1, meta.water)
t1= ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))+
geom_tiplab(aes(x= x+0.005))
t1
t1= ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))+
geom_tiplab(aes(x= x+0.001))
t1
t1= ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))+
geom_tiplab(aes(x= x+0.008))
t1
t1= ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))+
geom_tiplab(aes(x= x+0.1))
t1
runif(10)
# Generating  10000 numbers of uniform distribution
r=runif(10000)
hist(r)
meanr=mean(r)
sdr=sd(r)
# Draw three random samples from the distribution
samples1=sample(r,4)
samples1
samples2=sample(r,4)
samples2
samples3=sample(r,4)
samples3
mean(samples1)
mean(samples2)
mean(samples3)
cl4
# Run a For loop in R
cl4=mean(sample(r,4))
cl4
for (i in 1:1000) {
cl4=c(cl4=mean(sample(r,4)))
}
cl4
hist(cl4)
for (i in 1:1000){
cl4=c(cl4=mean(sample(r,4)))
}
cl4
for (i in 1:1000){
cl100 <- c(cl100, mean(sample(r,100)))
}
cl100
cl100=mean(sample(r,100))
cl100
for (i in 1:1000){
cl100 <- c(cl100, mean(sample(r,100)))
}
hist(cl100)
setwd("C:/Users/Irfan/OneDrive/Practice_R/R-for-Data-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8-/Machine Learning Using R/RDSML-Day-48 ðŸ‘‰ Multiple Linear Regression in R (Part-1)")
setwd("C:/Users/Irfan/OneDrive/Practice_R/R-for-Data-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8-/Machine Learning Using R/RDSML-Day-48 ðŸ‘‰ Multiple Linear Regression in R (Part-1)")
# Importing the dataset
dataset <- read.csv("50_Startups.csv")
View(dataset)
dataset$State <- factor(dataset$State,
levels = c("New York", "California", "Florida"),
levels = c (1,2,3)
dataset$State <- factor(dataset$State,
dataset$State <- factor(dataset$State,
levels = c("New York", "California", "Florida"),
labels = c(1,2,3))
# Splitting the dataset into the Training set and Test Set
library(caTools)
set.seed(123)
split <- sample.split(dataset$Profit, SplitRatio = 0.8)
training_set <- subset(dataset, split == T)
test_set <- subset(dataset, split == F)
View(training_set)
View(test_set)
regressor <- lm(formula = Profit~ R.D.Spend + Admininstration + Marketing.Spend + State, data = training_set)
regressor <- lm(formula = Profit~ R.D.Spend + Administration + Marketing.Spend + State, data = training_set)
summary(regressor)
setwd("C:/Users/Irfan/OneDrive/Practice_R/R-for-Data-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8-/Machine Learning Using R/RDSML-Day-49 ðŸ‘‰ Multiple Linear Regression in R (Part-2)")
dataset <- read.csv("50_Startups.csv")
dataset$State <- factor(dataset$State,
levels = c("New York", "California", "Florida"),
labels = c(1,2,3))
library(caTools)
set.seed(123)
split <- sample.split(dataset$Profit, SplitRatio = 0.8)
training_set <- subset(dataset, split == T)
test_set <- subset(dataset, split == F)
regressor <- lm(formula = Profit~ R.D.Spend + Administration + Marketing.Spend + State, data = training_set)
summary(regressor)
y_pred <- predict(regressor, test_set)
y_pred
# Fitting Multiple Linear Regression to the Training Set/Model preparation
regressor <- lm(formula = Profit~ R.D.Spend + Administration + Marketing.Spend + State, data = training_set)
# Checking the summary of the model
summary(regressor)
regressor <- lm(formula = Profit~ R.D.Spend + Administration + Marketing.Spend, data = training_set)
summary(regressor)
regressor <- lm(formula = Profit~ R.D.Spend + Marketing.Spend, data = training_set)
summary(regressor)
full_model <- lm(Profit ~., data = training_set)
summary(full_model)
final_model <- step(full_model, direction = "backward")
summary(final_model)
cor.test(training_set$R.D.Spend, training_set$Profit, method = "pearson")
cor(training_set$Marketing.Spend, training_set$Profit, method = "pearson")
cor.test(training_set$Marketing.Spend, training_set$Profit, method = "pearson")
library(ggplot2)
plot(training_set$R.D.Spend, training_set$Profit)
# Assumptions testing
plot(final_model)
install.packages("lmtest")
# Checking for the independence of errors/observation/residuals
# install.packages("lmtest")
library(lmtest)
dwtest(final_model)
shapiro.test(rstandard(final_model))
qqnorm(rstandard(final_model))
qqline(rstandard(final_model))
library(car)
vif(final_model)
plot(final_model$fitted.values, rstandard(final_model))
abline(h =0, col="red")
bptest(final_model)
