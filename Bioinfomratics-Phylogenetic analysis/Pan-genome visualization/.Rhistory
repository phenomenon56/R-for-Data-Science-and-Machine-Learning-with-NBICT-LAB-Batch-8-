install.packages("nycflights13")
attach(nycflights13::flights)
head(nycflights13::flights)
library(psych)
?describe
install.packages("mgcv", lib = "C:/Users/Irfan/Documents/R/win-library/4.5")
install.packages("mgcv", lib = "C:/Users/Irfan/Documents/R/win-library/4.5")
dir.create("C:/Users/Irfan/Desktop/Rlibs", showWarnings = FALSE)
.libPaths("C:/Users/Irfan/Desktop/Rlibs")
install.packages("mgcv")
library(mgcv)
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("ggtree")
install.packages("lattice")
library(ape)
tree = read.tree("C:/Users/Irfan/Downloads/example_tree.nwk")
tree
library(BiocManager)
tree = read.tree("C:\Users\Irfan\Downloads")
tree = read.tree("C:\\Users\\Irfan\\Downloads\\labeled_example_tree.nwk")
tree
meta = read.csv("C:\\Users\\Irfan\\Downloads\\phylogeny_data.csv", header = TRUE)
head(meta)
plot(tree)
tree = midpoint(tree)
install.packages("phangorn")
library(phangorn)
tree = midpoint(tree)
plot(tree)
library(ggtree)
dir.create("C:/Users/Irfan/Desktop/Rlibs", showWarnings = FALSE)
.libPaths("C:/Users/Irfan/Desktop/Rlibs")
install.packages("mgcv")
tree = midpoint(tree)
dir.create("C:/Users/Irfan/Desktop/Rlibs", showWarnings = FALSE)
.libPaths("C:/Users/Irfan/Desktop/Rlibs")
#install.packages("mgcv")
library(mgcv)
#install.packages("BiocManager")
library(BiocManager)
BiocManager::install("ggtree")
tree = read.tree("C:\\Users\\Irfan\\Downloads\\labeled_example_tree.nwk")
tree
meta = read.csv("C:\\Users\\Irfan\\Downloads\\phylogeny_data.csv", header = TRUE)
head(meta)
plot(tree)
install.packages("phangorn")
install.packages("phangorn")
library(phangorn)
tree = midpoint(tree)
plot(tree)
t1 = ggtree(tree) %<+% meta
t1
library(ggplot2)
library(ggtree)
ggtree(tree) %<+% meta +
geom_tippoint()
BiocManager::install("treeio")
library(treeio)
library(treeio)
install.packages("viridis")
install.packages("ggnewscale")
ggtree(tree) %<+% meta +
geom_tippoint(aes(color = Host))
ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))
tree = midpoint(tree)
ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))
t1= ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))
#install.packages("viridis")
#install.packages("ggnewscale")
head(meta)
meta.water = meta[1, 'Host']
meta.water
meta.water = as.data.frame (meta[1, 'Host'])
meta.water
row.names(meta.water)
colnames(meta.water)
head(meta)
meta$Strain_Name
rownames(meta.water)= meta$Strain_Name
colnames(meta.water) = 'Water'
gheatmap(t1, meta.water)
t1= ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))+
geom_tiplab(aes(x= x+0.005))
t1
t1= ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))+
geom_tiplab(aes(x= x+0.001))
t1
t1= ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))+
geom_tiplab(aes(x= x+0.008))
t1
t1= ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))+
geom_tiplab(aes(x= x+0.1))
t1
runif(10)
# Generating  10000 numbers of uniform distribution
r=runif(10000)
hist(r)
meanr=mean(r)
sdr=sd(r)
# Draw three random samples from the distribution
samples1=sample(r,4)
samples1
samples2=sample(r,4)
samples2
samples3=sample(r,4)
samples3
mean(samples1)
mean(samples2)
mean(samples3)
cl4
# Run a For loop in R
cl4=mean(sample(r,4))
cl4
for (i in 1:1000) {
cl4=c(cl4=mean(sample(r,4)))
}
cl4
hist(cl4)
for (i in 1:1000){
cl4=c(cl4=mean(sample(r,4)))
}
cl4
for (i in 1:1000){
cl100 <- c(cl100, mean(sample(r,100)))
}
cl100
cl100=mean(sample(r,100))
cl100
for (i in 1:1000){
cl100 <- c(cl100, mean(sample(r,100)))
}
hist(cl100)
setwd("C:/Users/Irfan/OneDrive/Practice_R/R-for-Data-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8-/Bioinfomratics-Phylogenetic analysis/Pan-genome visualization")
ibrary(data.table)
# install.packages('data.table')
library(data.table)
library(dplyr)
library(doParallel)
library(ggpubr)
PIRATE.gene_families = as.data.frame(fread("PIRATE.gene_families.ordered.tsv"))
PIRATE.gene_families$number_genomes <- 0
PIRATE.gene_families$number_genomes <- rowSums( !(PIRATE.gene_families[ , 23:length(colnames(PIRATE.gene_families))] == "") )
PIRATE.gene_families <- PIRATE.gene_families[ which(PIRATE.gene_families$number_genomes > 0), ]
head(PIRATE.gene_families)
gene_total <- colSums( !(PIRATE.gene_families[ , 23:length(colnames(PIRATE.gene_families))] == ""))
summary(as.vector(gene_total))
sd(gene_total)
hist(gene_total)
n_gene_fams<-  nrow(PIRATE.gene_families)
n_gene_fams
cols_to_exclude <- c("allele_name", "gene_family", "consensus_gene_name", "consensus_product", "threshold", "alleles_at_maximum_threshold", "number_genomes", "average_dose", "min_dose", "max_dose", "genomes_containing_fissions", "genomes_containing_duplications", "number_fission_loci",                    "number_duplicated_loci", "no_loci", "products",                    "gene_names", "min_length(bp)", "max_length(bp)",                    "average_length(bp)", "cluster", "cluster_order")
strains_only <- PIRATE.gene_families[,!names(PIRATE.gene_families) %in% cols_to_exclude]strain_names <- names(strains_only)
ngenomes <- length(unique(strain_names))
ngenomes <- length(unique(strain_names))
strains_only <- PIRATE.gene_families[, !names(PIRATE.gene_families) %in% cols_to_exclude]
strain_names <- names(strains_only)
ngenomes <- length(unique(strain_names))
ngenomes
n_gene_fams_core_all <- sum(PIRATE.gene_families$number_genomes == ngenomes)
n_gene_fams_core_all
n_gene_fams_core_all <- sum(PIRATE.gene_families$number_genomes == ngenomes)
n_gene_fams_core_all
p = (n_gene_fams_core_all*100)/n_gene_fams
p
cutoff <- round(.95* ngenomes)
n_gene_fams_core_w95per <- sum(PIRATE.gene_families$number_genomes >= cutoff)
n_gene_fams_core_w95per
c
c
core_gene_percentage <- (n_gene_fams_core_w95per * 100) / n_gene_fams
core_gene_percentage
core_all_percentage <- (n_gene_fams_core_all * 100) / n_gene_fams
core_all_percentage
n_gene_fams_singletons <- sum(PIRATE.gene_families$number_genomes == 1)
n_gene_fams_singletons
accesory_gene_percentage <- (n_gene_fams_singletons*100)/n_gene_fams
accesory_gene_percentage
n_accessory <- n_gene_fams - (n_gene_fams_singletons + n_gene_fams_core_w95per)
n_accessory
(n_accessory*100)/n_gene_fams
n_accessory / ngenomes
