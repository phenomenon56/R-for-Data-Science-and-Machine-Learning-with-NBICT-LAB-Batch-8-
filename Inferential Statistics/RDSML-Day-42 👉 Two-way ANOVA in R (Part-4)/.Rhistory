install.packages("phangorn")
install.packages("phangorn")
library(phangorn)
tree = midpoint(tree)
plot(tree)
t1 = ggtree(tree) %<+% meta
t1
library(ggplot2)
library(ggtree)
ggtree(tree) %<+% meta +
geom_tippoint()
BiocManager::install("treeio")
library(treeio)
library(treeio)
install.packages("viridis")
install.packages("ggnewscale")
ggtree(tree) %<+% meta +
geom_tippoint(aes(color = Host))
ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))
tree = midpoint(tree)
ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))
t1= ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))
#install.packages("viridis")
#install.packages("ggnewscale")
head(meta)
meta.water = meta[1, 'Host']
meta.water
meta.water = as.data.frame (meta[1, 'Host'])
meta.water
row.names(meta.water)
colnames(meta.water)
head(meta)
meta$Strain_Name
rownames(meta.water)= meta$Strain_Name
colnames(meta.water) = 'Water'
gheatmap(t1, meta.water)
t1= ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))+
geom_tiplab(aes(x= x+0.005))
t1
t1= ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))+
geom_tiplab(aes(x= x+0.001))
t1
t1= ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))+
geom_tiplab(aes(x= x+0.008))
t1
t1= ggtree(tree, layout = 'circular') %<+% meta +
geom_tippoint(aes(color = Host))+
geom_tiplab(aes(x= x+0.1))
t1
runif(10)
# Generating  10000 numbers of uniform distribution
r=runif(10000)
hist(r)
meanr=mean(r)
sdr=sd(r)
# Draw three random samples from the distribution
samples1=sample(r,4)
samples1
samples2=sample(r,4)
samples2
samples3=sample(r,4)
samples3
mean(samples1)
mean(samples2)
mean(samples3)
cl4
# Run a For loop in R
cl4=mean(sample(r,4))
cl4
for (i in 1:1000) {
cl4=c(cl4=mean(sample(r,4)))
}
cl4
hist(cl4)
for (i in 1:1000){
cl4=c(cl4=mean(sample(r,4)))
}
cl4
for (i in 1:1000){
cl100 <- c(cl100, mean(sample(r,100)))
}
cl100
cl100=mean(sample(r,100))
cl100
for (i in 1:1000){
cl100 <- c(cl100, mean(sample(r,100)))
}
hist(cl100)
setwd("C:/Users/Irfan/OneDrive/Practice_R/R-for-Data-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8-/RDSML-Day-39 ðŸ‘‰ Two-way ANOVA in R (Part-1)")
install.packages(c("tidyverse", "car", "emmeans", "effectsize", "performance", "broom", "kableExtra"))
library(broom)
library(car)
detach("package:carData", unload = TRUE)
library(effectsize)
library(performance)
# installing Packages
#install.packages(c("tidyverse", "car", "emmeans", "effectsize", "performance", "broom", "kableExtra"))
install.packages("emmeans")
library(emmeans)
# installing Packages
#install.packages(c("tidyverse", "car", "emmeans", "effectsize", "performance", "broom", "kableExtra"))
#install.packages("emmeans")
install.packages("kableExtra")
library(kableExtra)
d <- read.csv("cropdata.csv")
library(tidyverse)
summs <- d %>%
group_by(fert, irr) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
library(tidyverse)
# installing Packages
#install.packages(c("tidyverse", "car", "emmeans", "effectsize", "performance", "broom", "kableExtra"))
#install.packages("emmeans")
#install.packages("kableExtra")
library(tidyverse)
summs <- d %>%
group_by(fert, irr) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
library(tidyverse)
summs <- d %>%
group_by(fert, irr) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
library(tidyverse)
d <- read.csv("cropdata.csv")
summs <- d %>%
group_by(fert, irr) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
library(dplyr)
summs <- d %>%
group_by(fert, irr) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
View(summs)
# Quick Data Summary Visualization
library(ggplot2)
ggplot(summs, aes(irr, mean, group = fert))
ggplot(summs, aes(irr, mean, group = fert))+
geom_line()
ggplot(summs, aes(irr, mean, group = fert))+
geom_line() +
geom_point()
ggplot(summs, aes(irr, mean, group = fert))+
geom_line() +
geom_point(size = 2)
ggplot(summs, aes(irr, mean, group = fert))+
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se), width = 0.2)
ggplot(summs, aes(irr, mean, group = fert))+
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se), width = 0.2) +
facet_wrap(~fert, nrow = 1)
ggplot(summs, aes(irr, mean, group = fert))+
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se), width = 0.2) +
facet_wrap(~fert, nrow = 1) +
labs(x = "Irrigation", y = "Mean yield")
ggplot(summs, aes(irr, mean, group = fert))+
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se), width = 0.2) +
facet_wrap(~fert, nrow = 1) +
labs(x = "Irrigation", y = "Mean yield",
title = "Interaction of Fertilizer x Irrigation")
ggplot(summs, aes(irr, mean, group = fert))+
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se), width = 0.2) +
facet_wrap(~fert, nrow = 1) +
labs(x = "Irrigation", y = "Mean yield",
title = "Interaction of Fertilizer x Irrigation") +
theme_classic(base_size = 12)
setwd("C:/Users/Irfan/OneDrive/Practice_R/R-for-Data-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8-/RDSML-Day-40 ðŸ‘‰ Two-way ANOVA in R (Part-2)")
library(tidyverse)
library(dplyr)
library(dplyr)
d <- read.csv("cropdata.csv")
d <- read.csv("cropdata.csv")
summs <- d %>%
group_by(fert, irr) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
library(ggplot2)
ggplot(summs, aes(irr, mean, group = fert))+
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se), width = 0.2) +
facet_wrap(~fert, nrow = 1) +
labs(x = "Irrigation", y = "Mean yield",
title = "Interaction of Fertilizer x Irrigation") +
theme_classic(base_size = 12)
m <- aov(y ~ fert + irr + fert*irr, data = d)
summary(m)
summary(m)
# Assumptions Visual checks
plot(m)
par(mfrow=c(2,2))
plot(m)
par(mfrow=c(1,1))
# Shapiro-Wilk on Residuals (Normality)
residuals(m)
res <- residuals(m)
shapiro.test(res)
# Levene's test for equal variances
library(car)
leveneTest(y ~ fert*irr, data =d, center = median)
# Postâ€‘hoc & simpleâ€‘effects with emmeans/
# Interaction contrasts(simple effects): effect of fert at each level of irr
library(emmeans)
contrast(emmeans(m, ~ fert | irr), method = "pairwise", adjust = "tukey")
contrast(emmeans(m, ~ irr | fert), method = "pairwise", adjust = "tukey")
setwd("C:/Users/Irfan/OneDrive/Practice_R/R-for-Data-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8-/RDSML-Day-41 ðŸ‘‰ Two-way ANOVA in R (Part-3)")
library(tidyverse)
library(dplyr)
library(dplyr)
library(dplyr)
d <- read.csv("cropdata.csv")
summs <- d %>%
group_by(fert, irr) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
summs <- d %>%
group_by(fert, irr) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
summs <- d %>%
group_by(fert, irr) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
ggplot(summs, aes(irr, mean, group = fert))+
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se), width = 0.2) +
facet_wrap(~fert, nrow = 1) +
labs(x = "Irrigation", y = "Mean yield",
title = "Interaction of Fertilizer x Irrigation") +
theme_classic(base_size = 12)
ggplot(summs, aes(irr, mean, group = fert))+
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se), width = 0.2) +
facet_wrap(~fert, nrow = 1) +
labs(x = "Irrigation", y = "Mean yield",
title = "Interaction of Fertilizer x Irrigation") +
theme_classic(base_size = 12)
m <- aov(y ~ fert + irr + fert*irr, data = d)
summary(m)
par(mfrow=c(2,2))
plot(m)
par(mfrow=c(2,2))
plot(m)
par(mfrow=c(1,1))
res <- residuals(m)
shapiro.test(res)
res <- residuals(m)
shapiro.test(res)
library(car)
leveneTest(y ~ fert*irr, data =d, center = median)
library(emmeans)
contrast(emmeans(m, ~ fert | irr), method = "pairwise", adjust = "tukey")
library(emmeans)
contrast(emmeans(m, ~ irr | fert), method = "pairwise", adjust = "tukey")
library(emmeans)
contrast(emmeans(m, ~ irr | fert), method = "pairwise", adjust = "tukey")
library(emmeans)
contrast(emmeans(m, ~ irr | fert), method = "pairwise", adjust = "tukey")
contrast(emmeans(m, ~fert), method = "tukey")
contrast(emmeans(m, ~fert), method = "tukey")
contrast(emmeans(m, ~fert), method = "tukey")
contrast(emmeans(m, ~irr), method = "tukey")
# CLD (Compact Letter Display) Letters
library(multcomp)
install.packages("multcomp")
install.packages("multcompview")
library(multcomp)
install.packages("multcomp")
library(multcomp)
library(multcomp)
detach("package:multcomp", unload = TRUE)
library(multcomp)
detach("package:multcomp", unload = TRUE)
library(multcompview)
install.packages("multcompview")
install.packages("multcompView")
library(multcompview)
library(multcompview)
library(multcompView)
library(multcomp)
group_letters <- cld(emmeans(m, ~fert*irr), Letters = letters)
library(multcomp)
install.packages("TH.data")
library(multcomp)
library(multcomp)
install.packages("TH.data", repos = "https://cran.rstudio.com/")
install.packages("multcomp")
library(multcomp)
library(multcompView)
group_letters <- cld(emmeans(m, ~fert*irr), Letters = letters)
group_letters <- cld(emmeans(m, ~ fert * irr), Letters = LETTERS)
library(emmeans)
group_letters <- cld(emmeans(m, ~ fert * irr), Letters = LETTERS)
library(emmeans)
library(multcomp)
group_letters <- cld(emmeans(m, ~ fert * irr), Letters = LETTERS)
setwd("C:/Users/Irfan/OneDrive/Practice_R/R-for-Data-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8-/RDSML-Day-41 ðŸ‘‰ Two-way ANOVA in R (Part-3)")
library(tidyverse)
library(dplyr)
library(dplyr)
d <- read.csv("cropdata.csv")
summs <- d %>%
group_by(fert, irr) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
library(ggplot2)
ggplot(summs, aes(irr, mean, group = fert))+
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se), width = 0.2) +
facet_wrap(~fert, nrow = 1) +
labs(x = "Irrigation", y = "Mean yield",
title = "Interaction of Fertilizer x Irrigation") +
theme_classic(base_size = 12)
m <- aov(y ~ fert + irr + fert*irr, data = d)
summary(m)
par(mfrow=c(2,2))
plot(m)
par(mfrow=c(1,1))
res <- residuals(m)
shapiro.test(res)
library(car)
leveneTest(y ~ fert*irr, data =d, center = median)
library(emmeans)
contrast(emmeans(m, ~ fert | irr), method = "pairwise", adjust = "tukey")
contrast(emmeans(m, ~ irr | fert), method = "pairwise", adjust = "tukey")
contrast(emmeans(m, ~fert), method = "tukey")
contrast(emmeans(m, ~irr), method = "tukey")
library(multcomp)
library(multcompView)
group_letters <- cld(emmeans(m, ~ fert * irr), Letters = letters)
print(group_letters)
setwd("C:/Users/Irfan/OneDrive/Practice_R/R-for-Data-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8-/RDSML-Day-42 ðŸ‘‰ Two-way ANOVA in R (Part-4)")
# installing Packages
#install.packages(c("tidyverse", "car", "emmeans", "effectsize", "performance", "broom", "kableExtra"))
#install.packages("emmeans")
#install.packages("kableExtra")
library(tidyverse)
library(dplyr)
d <- read.csv("cropdata.csv")
# Quick Exploratory Descriptive Analysis
summs <- d %>%
group_by(fert, irr) %>%
summarise(mean = mean(y), se = sd(y)/sqrt(n()), .groups = "drop")
# Quick Data Summary Visualization
library(ggplot2)
ggplot(summs, aes(irr, mean, group = fert))+
geom_line() +
geom_point(size = 2) +
geom_errorbar(aes(ymin = mean-se, ymax = mean+se), width = 0.2) +
facet_wrap(~fert, nrow = 1) +
labs(x = "Irrigation", y = "Mean yield",
title = "Interaction of Fertilizer x Irrigation") +
theme_classic(base_size = 12)
# Fit the Model/Interaction between two variables
m <- aov(y ~ fert + irr + fert*irr, data = d)
summary(m)
# Assumptions Visual checks
par(mfrow=c(2,2))
plot(m)
par(mfrow=c(1,1))
res <- residuals(m)
shapiro.test(res)
# Levene's test for equal variances
library(car)
leveneTest(y ~ fert*irr, data =d, center = median)
# Postâ€‘hoc & simpleâ€‘effects with emmeans/
# Interaction contrasts(simple effects): effect of fert at each level of irr
library(emmeans)
contrast(emmeans(m, ~ fert | irr), method = "pairwise", adjust = "tukey")
# Postâ€‘hoc & simpleâ€‘effects with emmeans/
# Interaction contrasts(simple effects): effect of irr at each level of fert
library(emmeans)
contrast(emmeans(m, ~ irr | fert), method = "pairwise", adjust = "tukey")
# Mainâ€‘effect comparisons (only if interaction is negligible/
# considering 1 variable constant (e.g-irrigation here)
contrast(emmeans(m, ~fert), method = "tukey")
# Mainâ€‘effect comparisons (only if interaction is negligible/
# considering 1 variable constant (e.g- fertilization here)
contrast(emmeans(m, ~irr), method = "tukey")
# CLD (Compact Letter Display) Letters
library
# install.packages("TH.data", repos = "https://cran.rstudio.com/")
# install.packages("multcomp")
# install.packages("multcompView")
library(multcomp)
library(multcompView)
group_letters <- cld(emmeans(m, ~ fert * irr), Letters = letters)
print(group_letters)
library(broom)
library(kableExtra)
aov_tab <- Anova(m, type = 3) %>%
tidy() %>%
mutate(p.value = signif(p.value, 3))
print(aov_tab)
kbl(aov_tab, digits = 3, caption = "Two-way ANOVA") %>%
kable_classic(full_width = FALSE, html_font = "Times New Roman")
install.packages(c( "performance","broom.helpers","patchwork"))
suppressPackageStartupMessages({
library(tidyverse); library(car); library(emmeans); library(effectsize)
library(performance); library(broom); library(broom.helpers)
library(kableExtra); library(multcomp); library(multcompView); library(patchwork)
})
install.packages("performance")
suppressPackageStartupMessages({
library(tidyverse); library(car); library(emmeans); library(effectsize)
library(performance); library(broom); library(broom.helpers)
library(kableExtra); library(multcomp); library(multcompView); library(patchwork)
})
suppressPackageStartupMessages({
library(tidyverse); library(car); library(emmeans); library(effectsize)
library(performance); library(broom); library(broom.helpers)
library(kableExtra); library(multcomp); library(multcompView); library(patchwork)
})
# install.packages(c( "performance","broom.helpers","patchwork"))
# install.packages("performance")
install.packages("effectsize")
suppressPackageStartupMessages({
library(tidyverse); library(car); library(emmeans); library(effectsize)
library(performance); library(broom); library(broom.helpers)
library(kableExtra); library(multcomp); library(multcompView); library(patchwork)
})
options(contrasts = c("contr.sum","contr.poly"))
theme_set(theme_classic(base_size = 12))
d <- read.csv("cropdata.csv", stringsAsFactors = FALSE)
d <- d %>%
mutate(
y    = as.numeric(y),
fert = factor(fert),
irr  = factor(irr)
) %>%
drop_na(y, fert, irr)
install.packages("tidyr")
install.packages("tidyr")
# install.packages(c( "performance","broom.helpers","patchwork"))
# install.packages("performance")
# install.packages("effectsize")
# install.packages("tidyr")
library(tidyr)
d <- d %>%
mutate(
y    = as.numeric(y),
fert = factor(fert),
irr  = factor(irr)
) %>%
drop_na(y, fert, irr)
cat("\nCell counts (balance check):\n")
print(with(d, table(fert, irr)))
cat("\nGroup means (preview):\n")
print(d %>% group_by(fert, irr) %>% summarise(n=dplyr::n(), mean=mean(y), sd=sd(y), .groups="drop"))
cat("\nGroup means (preview):\n")
print(d %>% group_by(fert, irr) %>% summarise(n=dplyr::n(), mean=mean(y), sd=sd(y), .groups="drop"))
cat("\nGroup means (preview):\n")
print(d %>% group_by(fert, irr) %>% summarise(n=dplyr::n(), mean=mean(y), sd=sd(y), .groups="drop"))
summs <- d %>%
group_by(fert, irr) %>%
summarise(
n   = dplyr::n(),
mean= mean(y),
sd  = sd(y),
se  = sd/sqrt(n),
ci  = qt(.975, df=n-1)*se,  # 95% CI
.groups = "drop"
)
p_raw <- ggplot(d, aes(irr, y, color=fert)) +
geom_jitter(width=.08, height=0, alpha=.4) +
stat_summary(fun=mean, geom="point", position=position_dodge(width=.4), size=2.4) +
labs(title="Raw data with means", x="Irrigation", y="Yield")
p_raw <- ggplot(d, aes(irr, y, color=fert)) +
geom_jitter(width=.08, height=0, alpha=.4) +
stat_summary(fun=mean, geom="point", position=position_dodge(width=.4), size=2.4) +
labs(title="Raw data with means", x="Irrigation", y="Yield")
p_ci <- ggplot(summs, aes(irr, mean, group=fert, color=fert)) +
geom_line(position=position_dodge(width=.3)) +
geom_point(size=2, position=position_dodge(width=.3)) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci),
width=.15, position=position_dodge(width=.3)) +
labs(title="Means Â± 95% CI by Fertilizer Ã— Irrigation", x="Irrigation", y="Mean yield")
p_ci <- ggplot(summs, aes(irr, mean, group=fert, color=fert)) +
geom_line(position=position_dodge(width=.3)) +
geom_point(size=2, position=position_dodge(width=.3)) +
geom_errorbar(aes(ymin=mean-ci, ymax=mean+ci),
width=.15, position=position_dodge(width=.3)) +
labs(title="Means Â± 95% CI by Fertilizer Ã— Irrigation", x="Irrigation", y="Mean yield")
(p_raw / p_ci) + plot_annotation(title = "Exploratory view")
m <- aov(y ~ fert * irr, data = d)
m <- aov(y ~ fert * irr, data = d)
aov_tab <- Anova(m, type = 3) %>%
tidy() %>%
mutate(p.value = signif(p.value, 3))
kbl(aov_tab, digits = 3, caption = "Two-way ANOVA") %>%
kable_classic(full_width = FALSE, html_font = "Times New Roman")
par(mfrow=c(2,2)); plot(m); par(mfrow=c(1,1))
res <- residuals(m)
shapiro_p <- shapiro.test(res)$p.value
cat("\nShapiro-Wilk p =", signif(shapiro_p,3), "(normality of residuals)\n")
lev <- car::leveneTest(y ~ fert*irr, data = d, center = median)
cat("\nLevene test (median-based) for homogeneity of variance:\n"); print(lev)
cat("\nperformance::check_model(m):\n")
print(performance::check_model(m))
Would you like to install it? [y/n] y
Would you like to install it? [y/n]y
